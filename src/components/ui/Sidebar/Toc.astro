---
import type { MarkdownHeading } from "node_modules/astro/dist/types/public";

interface Props {
  headings?: MarkdownHeading[];
}
const { headings } = Astro.props;
---

<nav>
  <ul>
    {
      headings &&
        headings.map((heading) => (
          <li>
            <a class="toc-link" href={`#${heading.slug}`}>
              {heading.text}
            </a>
          </li>
        ))
    }
  </ul>
</nav>

<style>
  @reference "@/styles/global.css";
  ul {
    box-shadow: 2px 0 0 0 #e2e8f0 inset;
  }
  .dark ul {
    box-shadow: 2px 0 0 0 #d1d5db inset;
  }
  .toc-link {
    @apply text-gray-900 dark:text-gray-100 transition-all duration-300 ease-in-out;
    display: block;
    padding: 0.75rem 1rem;
    padding-left: 1.5rem;
    transition: background-color var(--duration);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .toc-link:hover {
    @apply dark:text-gray-900 bg-gray-300;
    box-shadow: 2px 0 0 0 #374151 inset;
  }
  .dark .toc-link:hover {
    background-color: rgb(209 213 219 / var(--tw-bg-opacity));
    @apply text-gray-800;
    box-shadow: 2px 0 0 0 #1f2937 inset;
  }
  .toc-link.active {
    @apply bg-gray-300 dark:bg-gray-300 font-medium text-gray-900 dark:text-gray-800;
    box-shadow: 2px 0 0 0 #374151 inset;
  }
  .dark .toc-link.active {
    box-shadow: 2px 0 0 0 #1f2937 inset;
  }
</style>

<script>
  function activelink() {
    const links = document.querySelectorAll(".toc-link");
    let activeLink: Element | null = null;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute("id");
        const link = document.querySelector(`.toc-link[href="#${id}"]`);

        if (entry.isIntersecting) {
          if (activeLink) {
            activeLink.classList.remove("active");
          }
          activeLink = link;
          activeLink!.classList.add("active");
        } else if (link === activeLink) {
          activeLink!.classList.remove("active");
          activeLink = null;
        }
      });
    });

    links.forEach((link) => {
      const id = link.getAttribute("href")!.slice(1);
      const el = document.getElementById(id);
      observer.observe(el!);
    });
  }

  activelink();
</script>
