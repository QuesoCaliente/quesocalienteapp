---
import Footer from "@/components/Footer.astro";
import Seo from "@/components/Seo.astro";
import GradientHero from "@/components/ui/GradientHero.astro";
import MiniHeader from "@/components/ui/MiniHeader.astro";
import Particles from "@/components/ui/Particles.astro";
import ThemeToggle from "@/components/ui/ThemeToggle.astro";
import { ClientRouter } from "astro:transitions";
import '../styles/global.css';
interface Props {
  title: string;
  description: string;
  image?: string;
  canonical?: string;
  showHero?: boolean;
}

const { title, description, image, canonical, showHero } = Astro.props;
---

<!doctype html>
<html class="dark" lang="es">
  <head>
    <Seo
      title={title}
      description={description}
      image={image}
      canonical={canonical}
    />
    <ClientRouter />
    <script is:inline>
      // Aplicar tema inmediatamente para evitar FOUC
      (function() {
        const theme = localStorage.getItem('theme') || 'dark';
        document.documentElement.classList.toggle('dark', theme === 'dark');
      })();
    </script>
    <script>
      // Script para manejar tema en navegación SPA
      function applyStoredTheme() {
        const theme = localStorage.getItem('theme') || 'dark';
        document.documentElement.classList.toggle('dark', theme === 'dark');
      }

      // Aplicar en cada cambio de página
      document.addEventListener('astro:page-load', applyStoredTheme);
      document.addEventListener('astro:before-swap', applyStoredTheme);
    </script>
  </head>
  <body class="lg:overflow-x-hidden h-full bg-[#f3f4f6] dark:bg-[#0a0a0a] text-gray-900 dark:text-gray-100">
    <!-- <Sidebar /> -->
     {showHero && (
    <GradientHero top="-31%"  />
    <Particles />
    <MiniHeader />
     )}
    <div
      id="content"
      class="relative w-full h-full bg-[#f3f4f6] dark:bg-[#0a0a0a] z-0 transition-transform duration-500 will-change-transform"
    >
      <slot />
      <Footer />
    </div>
  </body>
</html>
<style is:global>
  @reference "../styles/global.css";
  html {
    font-family: "Onest Variable", sans-serif;
    scroll-behavior: smooth;
  }
  html.dark {
    background: #0a0a0a;
  }
  body {
    margin: 0;
    padding: 0;
  }
  #sidebar-backdrop {
    @apply fixed top-0 left-0 right-0 w-full h-screen bottom-0 z-[21] bg-black/50;
    opacity: 0;
    display: none;
    will-change: opacity;
    transition: opacity 0.5s ease;
  }
  #sidebar-backdrop.active {
    opacity: 1;
    display: block;
  }

  @media (max-width: 991px) {
    body,
    html {
      overflow: auto;
    }
  }
</style>

<!-- <script>
  document.addEventListener("astro:page-load", async () => {
    const content = document.querySelector("#content") as HTMLElement;
    const sidebarBackdrop = document.querySelector(
      "#sidebar-backdrop"
    ) as HTMLElement;

    const toggleSidebar = () => {
      sidebarBackdrop.classList.toggle("active");
      sidebarBackdrop.classList.toggle("translate-x-64");
      content.classList.toggle("translate-x-64");
    };
    const menu = document.querySelector("#menu") as HTMLElement;
    menu.addEventListener("click", toggleSidebar);
  });
</script> -->

<style is:global>
  pre > code {
    display: grid; /*  this is way the line will span whole width of `code` component */
    padding: 1.5rem 0;
    background-color: #f1f5f9;
    border-radius: 0.5rem;
    color: #334155;
  }
  .dark pre > code {
    background-color: #1e293b;
    color: #e2e8f0;
  }
  pre > code [data-line] {
    border-left: 0.5rem solid transparent;
    padding: 0 0.5rem;
  }
  pre > code .highlighted {
    background-color: #dcfce7;
    border-color: #22c55e;
  }
  .dark pre > code .highlighted {
    background-color: #2e4c35;
    border-color: #469458;
  }
  /** 
     *  data-line-numbers will be enabled on markdown  
     *  with `showLineNumbers` meta string on it
     */
  pre > code[data-line-numbers] {
    counter-reset: line;
  }
  pre > code[data-line-numbers] > [data-line]::before {
    counter-increment: line;
    content: counter(line);
    display: inline-block;
    margin-right: 2rem;
    width: 1rem;
    text-align: right;
    color: #64748b;
  }
  .dark pre > code[data-line-numbers] > [data-line]::before {
    color: #7ca2dfad;
  }
  pre > code > [data-line]::before {
    content: "";
    display: inline-block;
    width: 1rem;
    text-align: right;
  }

  /** 
     *  we'll need to adjust the space required 
     *  the number depending on the number of digits 
     */
  pre > code[data-line-numbers-max-digits="2"] > [data-line]::before {
    width: 2rem;
  }

  pre > code[data-line-numbers-max-digits="3"] > [data-line]::before {
    width: 3rem;
  }

  section [data-rehype-pretty-code-fragment] {
    position: relative;
  }
  section [data-rehype-pretty-code-title] {
    position: relative;
    border-top-left-radius: 0.5rem;
    border-top-right-radius: 0.5rem;
    background-color: #e2e8f0;
    color: #475569;
    padding: 0.5rem 1rem;
  }
  .dark section [data-rehype-pretty-code-title] {
    background-color: #161f2c;
    color: #9abcf3ec;
  }

  section code > [data-highlighted-line] {
    background-color: #dcfce7;
    border-color: #22c55e;
  }
  .dark section code > [data-highlighted-line] {
    background-color: #9abcf336;
    border-color: #6990cc;
  }
</style>
